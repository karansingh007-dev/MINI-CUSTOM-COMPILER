
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AS DISPLAY DIVIDE ELSE EQEQ EQUALS GT ID IF LBRACE LT MINUS NEQ NUMBER PLUS RBRACE SEMI SET TIMES WHILEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : SET ID AS expression SEMIstatement : DISPLAY expression SEMIstatement : IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEstatement : WHILE expression LBRACE statement_list RBRACEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression EQEQ expression\n                  | expression NEQ expressionexpression : NUMBERexpression : ID'
    
_lr_action_items = {'SET':([0,2,3,8,16,25,26,36,37,38,40,42,43,44,],[4,4,-3,-2,-5,4,4,4,4,-4,-7,4,4,-6,]),'DISPLAY':([0,2,3,8,16,25,26,36,37,38,40,42,43,44,],[5,5,-3,-2,-5,5,5,5,5,-4,-7,5,5,-6,]),'IF':([0,2,3,8,16,25,26,36,37,38,40,42,43,44,],[6,6,-3,-2,-5,6,6,6,6,-4,-7,6,6,-6,]),'WHILE':([0,2,3,8,16,25,26,36,37,38,40,42,43,44,],[7,7,-3,-2,-5,7,7,7,7,-4,-7,7,7,-6,]),'$end':([1,2,3,8,16,38,40,44,],[0,-1,-3,-2,-5,-4,-7,-6,]),'RBRACE':([3,8,16,36,37,38,40,43,44,],[-3,-2,-5,39,40,-4,-7,44,-6,]),'ID':([4,5,6,7,15,17,18,19,20,21,22,23,24,],[9,12,12,12,12,12,12,12,12,12,12,12,12,]),'NUMBER':([5,6,7,15,17,18,19,20,21,22,23,24,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'AS':([9,],[15,]),'SEMI':([10,11,12,27,28,29,30,31,32,33,34,35,],[16,-16,-17,38,-8,-9,-10,-11,-12,-13,-14,-15,]),'PLUS':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[17,-16,-17,17,17,17,17,17,17,17,17,17,17,17,]),'MINUS':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[18,-16,-17,18,18,18,18,18,18,18,18,18,18,18,]),'TIMES':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[19,-16,-17,19,19,19,19,19,19,19,19,19,19,19,]),'DIVIDE':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[20,-16,-17,20,20,20,20,20,20,20,20,20,20,20,]),'LT':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[21,-16,-17,21,21,21,21,21,21,21,21,21,21,21,]),'GT':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[22,-16,-17,22,22,22,22,22,22,22,22,22,22,22,]),'EQEQ':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[23,-16,-17,23,23,23,23,23,23,23,23,23,23,23,]),'NEQ':([10,11,12,13,14,27,28,29,30,31,32,33,34,35,],[24,-16,-17,24,24,24,24,24,24,24,24,24,24,24,]),'LBRACE':([11,12,13,14,28,29,30,31,32,33,34,35,41,],[-16,-17,25,26,-8,-9,-10,-11,-12,-13,-14,-15,42,]),'ELSE':([39,],[41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,25,26,42,],[2,36,37,43,]),'statement':([0,2,25,26,36,37,42,43,],[3,8,3,3,8,8,3,8,]),'expression':([5,6,7,15,17,18,19,20,21,22,23,24,],[10,13,14,27,28,29,30,31,32,33,34,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','compiler.py',72),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','compiler.py',77),
  ('statement_list -> statement','statement_list',1,'p_statement_list','compiler.py',78),
  ('statement -> SET ID AS expression SEMI','statement',5,'p_statement_set','compiler.py',85),
  ('statement -> DISPLAY expression SEMI','statement',3,'p_statement_display','compiler.py',90),
  ('statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','statement',9,'p_statement_if_else','compiler.py',94),
  ('statement -> WHILE expression LBRACE statement_list RBRACE','statement',5,'p_statement_while','compiler.py',101),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','compiler.py',113),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','compiler.py',114),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','compiler.py',115),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','compiler.py',116),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','compiler.py',117),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','compiler.py',118),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_binop','compiler.py',119),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','compiler.py',120),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',134),
  ('expression -> ID','expression',1,'p_expression_id','compiler.py',138),
]
